/**
 * SerialExp-Firmware
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 by Securehardware@bi0s
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
// Pin Declarations for the modules in the Kit
const int cntrl_1Pin = 12; // Pin D6
const int cntrl_2Pin = 16; // Pin D0

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
// Libraries Included for modules
#include <Wire.h>
#include "SSD1306Wire.h"
#include <FS.h>

SSD1306Wire display(0x3c, 4, 5, GEOMETRY_128_32);

// Custom Header Files
#include "images.h"

////////////////////////////////////////////////////////////////////
String name;
String cred;
String id;
String s_ip;
///////////////////////////////////////////////////////////////////
int8_t num ;
uint8_t num1;
bool isLoggedIn = false;
bool exitStatus = false;
String S;
///////////////////////////////////////////////////////////////////
void inctf_logo() {
    display.drawXbm(0, 0,Logo_width,Logo_height,inctf);
}
/////////////////////////////////////////////////////////////////////
void disp_name() {
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.setFont(ArialMT_Plain_10);
    display.drawString(0, 0, "Hi, My name is ");
    display.setFont(ArialMT_Plain_16);
    display.drawString(0,10,name);
}
/////////////////////////////////////////////////////////////////////
void handcraft() {
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.setFont(ArialMT_Plain_16);
    display.drawString(0, 0, "Handcrafted by");
}
//////////////////////////////////////////////////////////////////////////
void setup()
{
  // Debug Enable
  Serial.begin(57600);
  // Display Init
  display.init();
  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_10);
  inctf_logo();
  display.display();
  // FS Init
  if(!SPIFFS.begin()){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }
// Calling FS Values

  File  spiffs_name = SPIFFS.open("/name", "r");
   if (!spiffs_name) {
      Serial.println("file open failed");
  }   Serial.println("---Reading from Name---");
  name=spiffs_name.readStringUntil('\n');
  spiffs_name.close();

  File  spiffs_ip = SPIFFS.open("/ip", "r");
   if (!spiffs_ip) {
      Serial.println("file open failed");
  }   Serial.println("---Reading from IP---");
  s_ip=spiffs_ip.readStringUntil('\n');
  spiffs_ip.close();
  
  File  spiffs_id= SPIFFS.open("/id", "r");
   if (!spiffs_id) {
      Serial.println("file open failed");
  }   Serial.println("---Reading from ID---");
  id=spiffs_id.readStringUntil('\n');
  spiffs_id.close();

  File  spiffs_pass= SPIFFS.open("/pass", "r");
   if (!spiffs_pass) {
      Serial.println("file open failed");
  }   Serial.println("---Reading from Creds---");
  cred=spiffs_pass.readStringUntil('\n');
  spiffs_pass.close();

// Debug Purposes
// Serial.println(upad); 
// Serial.println(upasswd);
// Serial.println(mqttClientID);

// String IP conversion

  randomSeed(analogRead(A0));
  display.clear();
  display.drawString(0,0,"Challenge is loaded");
  display.drawString(0,20,"Good Luck : )");
  display.display();
}

/////////////////////////////////////////////////////////////////////

void login(){
  int num = random(100000,1000000);
  //Serial.println(num);
  Serial.println("\nEnter the OTP:");
  while(Serial.available() == 0){}
  S = Serial.readString();
  int input = S.toInt();
  if(num == input){
    Serial.println("\nLogin successful...");
    isLoggedIn = true;
  }
  else{
    Serial.println("\nLogin Failed...");
  }
  delay(250);
}

void view(){ 
  byte data[] = {240, 126, 25, 238, 211, 238, 221, 79, 70, 125, 233, 130, 67, 116, 69, 77, 88, 203, 255, 182, 253, 208, 61, 111, 205, 119, 59, 73, 159, 156, 86, 31, 209, 227, 164, 81, 23, 82, 110, 210, 90, 218, 196, 221, 61, 110, 61, 183, 0, 3, 29, 168, 156, 29, 80, 233, 12, 118, 245, 18, 54, 246, 209, 141, 59, 36, 92, 38, 252, 234, 39, 163, 122, 2, 97, 151, 34, 135, 233, 38, 75, 239, 166, 91, 130, 158, 210, 101, 154, 16, 39, 209, 199, 69, 249, 195, 146, 217, 124, 187, 202, 173, 51, 208, 252, 126, 56, 150, 121, 131, 203, 11, 153, 226, 10, 133, 174, 151, 190, 175, 89, 169, 227, 188, 139, 19, 198, 35, 206, 57, 252, 148, 61, 73, 238, 77, 118, 132, 121, 5, 255, 91, 46, 20, 192, 195, 220, 221, 133, 119, 138, 185, 59, 40, 148, 252, 23, 192, 161, 188, 57, 107, 7, 131, 237, 114, 250, 180, 163, 74, 95, 139, 7, 73, 215, 68, 169, 64, 38, 37, 102, 97, 108, 99, 111, 110, 123, 121, 48, 117, 95, 51, 120, 116, 114, 52, 99, 116, 51, 100, 95, 116, 104, 51, 95, 115, 51, 99, 116, 114, 51, 116, 95, 100, 52, 116, 52, 125, 226, 108, 200, 198, 169, 16, 138, 13, 158, 247, 201, 83, 48, 47, 188, 167, 152, 90, 193, 114, 79, 81, 50, 87, 164, 90, 156, 112, 21, 218, 207, 136, 21, 168, 225, 84, 144, 90, 82, 13, 55, 137};
  Serial.println("\nEnter amount of Data to be read ( Max 50 )") ;
  while(Serial.available() == 0){}
  S = Serial.readString();
  num = S.toInt();
  if(num > 50){
    Serial.println("\nYou dont have permission to read that much.....");
  }
  else{
    num1 = num;
    for(int i=0 ; i<num1 ; i++){
      Serial.print((char)data[i]);
    }
    Serial.println();
  }
  delay(250);
}

void loop()
{

  if(!exitStatus){
    if(!isLoggedIn){                                                                                                                                                  
      Serial.println("\n*******************Welcome to Star Ship Control*******************");
      Serial.println("L) Login\nE) Exit\n\nEnter Option : ");
      while(Serial.available() == 0){}
      S = Serial.readString();
      char c = S.charAt(0);
      switch(c){
        case 'L': login(); break;
        case 'E': exitStatus = true; break;
        default : Serial.println("Invalid Option");
      }
    }
    else{
      Serial.println("\n************************Logged in as Cadet************************");
      Serial.println("V) View Data\nL) Logout\n\n Enter Option : ");
      while(Serial.available() == 0){}
      S = Serial.readString();
      char c = S.charAt(0);
      switch(c){
        case 'V': view();break;
        case 'L': isLoggedIn = false;break;   
        default: Serial.println("Invalid Option");
      }
    }
  }
}

/////////////////////////////////////////////////////////////////////
